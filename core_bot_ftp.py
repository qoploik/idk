import os
from dotenv import load_dotenv
load_dotenv()  # loads .env file if it exists

FREECURRENCY_API_KEY = os.environ["FREECURRENCY_API_KEY"]
TOKEN = os.environ["TG_BOT_TOKEN"]

import json
import re
#import requests
import asyncio
from db import init_db
from db import log_request
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import freecurrencyapi

with open("exchange_rates.json", "r", encoding="utf-8") as f:
    filtered_curr = json.load(f)

#client = freecurrencyapi.Client(FREECURRENCY_API_KEY)
#EUR_curr = client.latest(base_currency='EUR')
#SET_curr = ['USD', 'RUB']
#filtered_curr = {k: v for k, v in EUR_curr['data'].items() if k in SET_curr}

min_com = 1.1
max_com = 1.3
min_value = 30
usdt_prem = 1.05

# Bot initialization (aiogram 3.7+)
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

#–ú–û–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ö–û–ú–ê–ù–î–ê
@dp.message(Command("get_price"))
async def get_price(message: Message):
    await message.answer(
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä –∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ–≥–æ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ RUB –∏–ª–∏ USDT - —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        "15.95\n"
        "–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ - –≤–≤–æ–¥–∏—Ç–µ —Ü–µ–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É:\n"
        "15 - 99.90 - 299.9"
    )

# --- /start COMMAND ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup( #!!!
        inline_keyboard=[
            [InlineKeyboardButton(text="—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ãüîÆ", callback_data="get_price")],
            [InlineKeyboardButton(text="–°–≤—è–∑—å", url="https://t.me/lil_georgii")],
            [InlineKeyboardButton(text="faq", callback_data="faq")]
        ]
    )
    await message.answer(
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∫ –∑–∞–∫–∞–∑—É <i>items</i>‚ú®!\n"
        "–ö–∞–∫ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ - –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í–∞—à –±–∞–π–µ—Ä!‚ù§Ô∏è\n",
        reply_markup=keyboard)

# --- /faq COMMAND ---
@dp.message(Command("faq"))
async def faq_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="—É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ãüîÆ", callback_data="get_price")],
            [InlineKeyboardButton(text="–∞–¥–º–∏–Ω –ø–∞–±–ª–∏–∫–∞", url="https://t.me/lil_georgii")]
        ]
    )
    await message.answer(
        "<b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:...</b> –∏ –æ—Ç–≤–µ—Ç—ã –∫ –Ω–∏–º!\n"
        "<b>1. –û—Ç–∫—É–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 300üí∂?</b>\n"
        "–≠—Ç–æ —É—Å–ª–æ–≤–Ω—ã–µ –ø–æ—Ä–æ–≥, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É —Ç–∞–º–æ–∂–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –¢–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —É—Å–ª–æ–≤–Ω—ã–π - –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–µ\n"
        "<b>2. –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?</b>\n"
        "–ú—ã –∑–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –£ —Å–µ—Ä–≤–∏—Å–∞ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ 30 EUR –Ω–∞ –ø–æ–∫—É–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥–æ 10% —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –æ–±—â–µ–≥–æ —á–µ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ :)\n" 
        "<b>3. –í—ã –¥–µ–ª–∞–µ—Ç–µ –æ—Ñ—Ñ–ª–∞–π–Ω –≤—ã–∫—É–ø—ã, –ø–æ—Ö–æ–¥ –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏?</b>\n"
        "–ó–∞ –¥–µ–Ω—å–≥–∏ –¥–∞ (–≤ –ì–µ—Ä–º–∞–Ω–∏–∏)", reply_markup=keyboard)

# --- /contact COMMAND ---
@dp.message(Command("contact"))
async def contact_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–∞–¥–º–∏–Ω –ø–∞–±–ª–∏–∫–∞", url="https://t.me/lil_georgii")],
            [InlineKeyboardButton(text="–ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—åüîÆ", callback_data="get_price")],
            [InlineKeyboardButton(text="–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="faq")]
        ]
    )
    await message.answer("<b>—Å–≤—è–∑–∞—Ç—å—Å—è‚¨áÔ∏è</b>", reply_markup=keyboard)


# --- CALLBACK BUTTONS HANDLER ---
@dp.callback_query(F.data.in_({"start", "get_price", "faq", "contact"}))
async def callback_handler(callback: CallbackQuery):
    if callback.data == "start":
        await start_handler(callback.message)
    elif callback.data == "get_price":
        await get_price(callback.message)
    elif callback.data == "faq":
        await faq_handler(callback.message)
    elif callback.data == "contact":
        await contact_handler(callback.message)
    await callback.answer()


# --- USER INPUT HANDLER ---
@dp.message()
async def user_input_handler(message: Message):
    raw_string = message.text
    try:
        index = parse_index(raw_string)
        await log_request(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            raw_entry=message.text,
            index_array=index,  # your parsed float list
        )
        if not index:
            await existence_error(message)
            return
        if any(value > 300 for value in index):
            await exceed_value(message)
            return
        else:
            await calculate_price(message, index)
    except ValueError:
        await existence_error(message)
        

def parse_index(raw_string: str) -> list[float]:
    """ Extracts float values from a messy input string:
    - Replaces commas with dots for decimals
    - Replaces all non-numeric/non-dot characters with space
    - Returns a list of float numbers """
    cleaned = re.sub(r"[^0-9.\s]", " ", raw_string.replace(",", "."))
    return [float(x) for x in cleaned.split() if x.strip()]

# --- SHARED REPLY KEYBOARD FOR ERRORS ---
def error_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start")],
            [InlineKeyboardButton(text="–°–≤—è–∑—å", callback_data="contact")]
        ]
    )

async def existence_error(message: Message):
    await message.answer("–í–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã :)", reply_markup=error_keyboard())
async def exceed_value(message: Message):
    await message.answer("–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç 300 EUR - –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É", reply_markup=error_keyboard())
async def calculate_price(message: Message, index: list[float]):
    XXX = sum(index)
    if XXX <= 100:
        TOTAL = XXX + min_value
    elif XXX > 1000:
        TOTAL = XXX * min_com
    else:
        coeff = min_value + ((XXX - 100) * (100 - min_value)) / (1000 - 100)
        TOTAL = XXX + coeff
    real_com = TOTAL - XXX
    rubles = "{:,.1f}".format(TOTAL * filtered_curr['RUB']).replace(",", " ")
    usdt = "{:,.1f}".format(TOTAL * filtered_curr['USD'] * usdt_prem).replace(",", " ")
    SUM_USD = sum(index)*filtered_curr['USD']
    SUM_RUB = sum(index)*filtered_curr['RUB']
    await message.answer(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –ø–æ–∫—É–ø–∫–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {sum(index):.2f} EUR,"
                         f" —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ (+–¥–æ—Å—Ç–∞–≤–∫–∞) {real_com:.2f} EUR —Å–æ—Å—Ç–∞–≤–∏—Ç {TOTAL:.2f} EUR.\n"
                         f"–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ —Ä—É–±–ª—è—Ö –±—É–¥–µ—Ç <i>{rubles} —Ä—É–±.</i>.\n"
                         f"–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ USDT –≤—ã–π–¥–µ—Ç <i>{usdt} USD</i>")

#—É–±.</i>,\n–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ USDT –≤—ã–π–¥–µ—Ç <i>{usdt} USD</i>"

# --- MAIN ENTRYPOINT ---
async def main():
    await init_db()       # creates tables if they don't exist
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())